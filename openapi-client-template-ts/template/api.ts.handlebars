import Configuration from "./configuration";
{{#if components.schemas}}
  import {
    {{#each components.schemas}}{{@key}}, {{/each}}
  } from "./model";
{{/if}}
import { get, post } from "./httpVerbs";

// {{info.title}}
{{!-- // {{info.description}} --}}
export default class Api {
  private config: Configuration;

  constructor(config: Configuration) {
    this.config = config;
  }

  {{#each paths}}
  {{setVar "path" @key}}
  {{#with get}}
    
    {{#if summary}}// {{summary}}{{/if}}
    {{#if description}}// {{description}}{{/if}}
    {{#each parameters}}
      // @param {{name}} {{description}}
    {{/each}}
    async {{operationId}}(
      {{!-- move required params to the front --}}
      {{#eachWhere parameters "$this.required"}}
        {{name}}: {{typeConvert schema}},
      {{/eachWhere}}
      {{!-- next add params with default values --}}
      {{#eachWhere parameters "!$this.required && $this.schema.default"}}
        {{name}}: {{typeConvert schema}}{{#if schema.default}} = "{{schema.default}}"{{/if}},
      {{/eachWhere}}
      {{!-- finally, all optional params --}}
      {{#eachWhere parameters "!$this.required && !$this.schema.default"}}
        {{name}}?: {{typeConvert schema}},
      {{/eachWhere}}
    ): Promise<{{#with (lookup responses.200.content 'application/json')}}{{typeConvert schema}}{{/with}}> {
      let queryParams: [string, string][] = [];
      {{#eachWhere parameters "$this.in == 'query'"}} 
      if ({{name}} !== undefined) {
        queryParams.push(["{{name}}", {{name}}.toString()]);
      }
      {{/eachWhere}}
      return get(this.config, "{{@root.path}}", queryParams, [
        {{#eachWhere parameters "$this.in == 'path'"}}
          ["{{name}}", {{name}}.toString()],
        {{/eachWhere}}
      ]);
    };
    
  {{/with}}
  {{/each}}

  {{#each paths}}
  {{setVar "path" @key}}
  {{#with post}}
    
    {{#if summary}}// {{summary}}{{/if}}
    {{#if description}}// {{description}}{{/if}}
    {{#each parameters}}
      // @param {{name}} {{description}}
    {{/each}}
    async {{operationId}}(
      value: {{#with (lookup requestBody.content 'application/json')}}{{typeConvert schema}}{{/with}}
    ): Promise<
      {{#if responses.200.content}}
        {{#with (lookup responses.200.content 'application/json')}}{{typeConvert schema}}{{/with}}
      {{else}}
        {{#with (lookup responses.default.content 'application/json')}}{{typeConvert schema}}{{/with}}
      {{/if}}
      > {
      return post(this.config, "{{@root.path}}", value);
    };
    
  {{/with}}
  {{/each}}
}

