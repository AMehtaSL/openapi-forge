import Configuration from "./configuration";
{{#if definitions}}
  import {
    {{#each definitions}}{{@key}}, {{/each}}
  } from "./model";
{{/if}}
import { get, post } from "./httpVerbs";

export default class Api {
  private config: Configuration;

  constructor(config: Configuration) {
    this.config = config;
  }

  {{#each paths}}
  {{setVar "path" @key}}
  {{#with get}}
    
    {{#if summary}}
    // {{summary}}
    // {{description}}
    {{#each parameters}}
      // @param {{name}} {{description}}
    {{/each}}
    {{/if}}
    async {{operationId}}(
      {{#eachWhere parameters "$this.required"}}
        {{name}}: {{typeConvert this}},
      {{/eachWhere}}
      {{#eachWhere parameters "!$this.required"}}
        {{name}}?: {{typeConvert this}},
      {{/eachWhere}}
    ): Promise<{{typeConvert responses.200.schema}}> {
      return get(this.config, "{{@root.path}}", [
        {{#eachWhere parameters "$this.in == 'query'"}} 
          ["{{name}}", {{name}}.toString()],
        {{/eachWhere}}
      ], [
        {{#eachWhere parameters "$this.in == 'path'"}}
          ["{{name}}", {{name}}.toString()],
        {{/eachWhere}}
      ]);
    };
    
  {{/with}}
  {{/each}}

  {{#each paths}}
  {{setVar "path" @key}}
  {{#with post}}
    
    {{#if summary}}
    // {{summary}}
    // {{description}}
    {{#each parameters}}
      // @param {{name}} {{description}}
    {{/each}}
    {{/if}}
    async {{operationId}}(
      value: {{typeConvert parameters.[0].schema}}
    ): Promise<{{typeConvert parameters.[0].schema}}> {
      return post(this.config, "{{@root.path}}", value);
    };
    
  {{/with}}
  {{/each}}
}

